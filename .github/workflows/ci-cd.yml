---
name: PiTrac CI/CD
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: null
jobs:
  test_windows:
    name: Test on Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Visual Studio tools
        uses: microsoft/setup-msbuild@v1.1
      - name: Install OpenCV
        run: >
          $OpenCVUrl =
          "https://github.com/opencv/opencv/releases/download/4.5.5/opencv-4.5.5-vc14_vc15.exe"

          Invoke-WebRequest -Uri $OpenCVUrl -OutFile opencv.exe

          Start-Process -FilePath "opencv.exe" -ArgumentList "-o$(Get-Location)\opencv_extract", "-y" -Wait


          # Set environment variable

          echo "OPENCV_DIR=$(Get-Location)\opencv_extract" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh
      - name: Install Boost
        run: >
          choco install boost-msvc-14.3 -y

          echo "BOOST_ROOT=C:\local\boost_1_83_0" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh
      - name: Install OpenCppCoverage
        run: choco install opencppcoverage -y
        shell: pwsh
      - name: Run Tests
        run: >
          .\ci-test-integration.ps1 -IncludeBoostTests -IncludeMainTests -Coverage
          -OutputDir "$env:GITHUB_WORKSPACE\test-results"
        shell: pwsh
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-windows
          path: test-results/
  test_linux:
    name: Test on Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Dependencies
        run: >
          sudo apt-get update

          sudo apt-get install -y build-essential cmake libopencv-dev libboost-all-dev

          pip install gcovr
      - name: Run Tests
        run: |
          chmod +x ./ci-test-integration.sh
          ./ci-test-integration.sh --output="$GITHUB_WORKSPACE/test-results"
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-linux
          path: test-results/
  publish_coverage:
    name: Publish Coverage
    runs-on: ubuntu-latest
    needs:
      - test_windows
      - test_linux
    if: always()
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: all-artifacts
      - name: Display Structure of Downloaded Files
        run: ls -R all-artifacts
      - name: Generate Combined Report
        run: >
          mkdir -p combined-report

          echo "# PiTrac Test Coverage Report" > combined-report/README.md


          # Copy Windows coverage

          if [ -d "all-artifacts/test-results-windows/boost-tests/coverage" ]; then
            mkdir -p combined-report/windows
            cp -R all-artifacts/test-results-windows/boost-tests/coverage/* combined-report/windows/
            echo "- [Windows Coverage Report](./windows/index.html)" >> combined-report/README.md
          fi


          # Copy Linux coverage

          if [ -d "all-artifacts/test-results-linux/boost-tests/coverage" ]; then
            mkdir -p combined-report/linux
            cp -R all-artifacts/test-results-linux/boost-tests/coverage/* combined-report/linux/
            echo "- [Linux Coverage Report](./linux/index.html)" >> combined-report/README.md
          fi
      - name: Upload Combined Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: combined-coverage-report
          path: combined-report/
