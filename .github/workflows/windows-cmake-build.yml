name: Windows CMake Build and Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Software/LMSourceCode/**'
      - '.github/workflows/windows-cmake-build.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Software/LMSourceCode/**'
      - '.github/workflows/windows-cmake-build.yml'
  workflow_dispatch:

env:
  # Build configuration
  BUILD_TYPE: Release
  CMAKE_BUILD_PARALLEL_LEVEL: 4
  
  # Dependency versions
  OPENCV_VERSION: "4.11.0"
  BOOST_VERSION: "1.87.0"
  
  # Installation paths
  OPENCV_INSTALL_PATH: "C:/tools/opencv"
  BOOST_INSTALL_PATH: "C:/tools/boost"
  
  # Environment variables for CMake
  OPENCV_DIR: "C:/tools/opencv/build"
  BOOST_ROOT: "C:/tools/boost"

jobs:
  build-and-test:
    runs-on: windows-2022
    
    strategy:
      matrix:
        configuration: [Debug, Release]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup MSVC Development Environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        vsversion: '2022'

    - name: Cache Dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          C:/tools/opencv
          C:/tools/boost
        key: ${{ runner.os }}-deps-opencv${{ env.OPENCV_VERSION }}-boost${{ env.BOOST_VERSION }}-v3
        restore-keys: |
          ${{ runner.os }}-deps-opencv${{ env.OPENCV_VERSION }}-boost${{ env.BOOST_VERSION }}-
          ${{ runner.os }}-deps-opencv${{ env.OPENCV_VERSION }}-
          ${{ runner.os }}-deps-

    - name: Install Chocolatey packages
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
        choco install ninja -y
        refreshenv

    - name: Download and Install OpenCV
      if: steps.cache-deps.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        $ErrorActionPreference = "Stop"
        
        Write-Host "Downloading OpenCV $env:OPENCV_VERSION..." -ForegroundColor Green
        $opencvUrl = "https://github.com/opencv/opencv/releases/download/$env:OPENCV_VERSION/opencv-$env:OPENCV_VERSION-windows.exe"
        $opencvInstaller = "opencv-$env:OPENCV_VERSION-windows.exe"
        
        # Download with retry logic
        $maxRetries = 3
        $retryCount = 0
        do {
            try {
                Invoke-WebRequest -Uri $opencvUrl -OutFile $opencvInstaller -UseBasicParsing
                break
            } catch {
                $retryCount++
                if ($retryCount -eq $maxRetries) {
                    throw "Failed to download OpenCV after $maxRetries attempts: $_"
                }
                Write-Warning "Download attempt $retryCount failed, retrying..."
                Start-Sleep -Seconds 5
            }
        } while ($retryCount -lt $maxRetries)
        
        Write-Host "Installing OpenCV..." -ForegroundColor Green
        New-Item -ItemType Directory -Force -Path "$env:OPENCV_INSTALL_PATH"
        
        # Extract OpenCV (it's a self-extracting archive)
        Start-Process -FilePath ".\$opencvInstaller" -ArgumentList "-o$env:OPENCV_INSTALL_PATH", "-y" -Wait
        
        # Verify installation
        $buildPath = "$env:OPENCV_INSTALL_PATH/build"
        if (-Not (Test-Path $buildPath)) {
            throw "OpenCV installation failed - build directory not found"
        }
        
        Write-Host "OpenCV installed successfully to $env:OPENCV_INSTALL_PATH" -ForegroundColor Green
        Remove-Item $opencvInstaller -Force -ErrorAction SilentlyContinue

    - name: Download and Install Boost
      if: steps.cache-deps.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        $ErrorActionPreference = "Stop"
        
        Write-Host "Downloading Boost $env:BOOST_VERSION..." -ForegroundColor Green
        $boostVersionUnderscore = $env:BOOST_VERSION.Replace(".", "_")
        $boostUrl = "https://archives.boost.io/release/$env:BOOST_VERSION/source/boost_$boostVersionUnderscore.zip"
        $boostArchive = "boost_$boostVersionUnderscore.zip"
        
        # Download with retry logic
        $maxRetries = 3
        $retryCount = 0
        do {
            try {
                Invoke-WebRequest -Uri $boostUrl -OutFile $boostArchive -UseBasicParsing
                break
            } catch {
                $retryCount++
                if ($retryCount -eq $maxRetries) {
                    throw "Failed to download Boost after $maxRetries attempts: $_"
                }
                Write-Warning "Download attempt $retryCount failed, retrying..."
                Start-Sleep -Seconds 5
            }
        } while ($retryCount -lt $maxRetries)
        
        Write-Host "Extracting Boost..." -ForegroundColor Green
        Expand-Archive -Path $boostArchive -DestinationPath "C:/tools/" -Force
        
        # Rename extracted directory to standard path
        $extractedPath = "C:/tools/boost_$boostVersionUnderscore"
        if (Test-Path $extractedPath) {
            if (Test-Path $env:BOOST_INSTALL_PATH) {
                Remove-Item $env:BOOST_INSTALL_PATH -Recurse -Force
            }
            Rename-Item $extractedPath $env:BOOST_INSTALL_PATH
        }
        
        Write-Host "Building Boost libraries..." -ForegroundColor Green
        Set-Location $env:BOOST_INSTALL_PATH
        
        # Bootstrap Boost
        .\bootstrap.bat
        if ($LASTEXITCODE -ne 0) { throw "Boost bootstrap failed" }
        
        # Build only required libraries to save time and space
        .\b2.exe --with-program_options --with-timer --with-log --with-thread --with-filesystem --with-regex variant=release,debug link=shared threading=multi runtime-link=shared address-model=64 stage
        if ($LASTEXITCODE -ne 0) { throw "Boost build failed" }
        
        Write-Host "Boost installed successfully to $env:BOOST_INSTALL_PATH" -ForegroundColor Green
        Set-Location $env:GITHUB_WORKSPACE
        Remove-Item $boostArchive -Force -ErrorAction SilentlyContinue

    - name: Verify Dependencies
      shell: powershell
      run: |
        Write-Host "Verifying OpenCV installation..." -ForegroundColor Green
        $opencvBuildPath = "$env:OPENCV_DIR"
        $opencvIncludePath = "$opencvBuildPath/include"
        $opencvLibPath = "$opencvBuildPath/x64/vc16/lib"
        
        if (-Not (Test-Path $opencvIncludePath)) {
            throw "OpenCV include directory not found: $opencvIncludePath"
        }
        if (-Not (Test-Path $opencvLibPath)) {
            throw "OpenCV lib directory not found: $opencvLibPath"
        }
        
        $opencvWorldLib = Get-ChildItem "$opencvLibPath/opencv_world*.lib" | Select-Object -First 1
        if (-Not $opencvWorldLib) {
            throw "OpenCV world library not found in $opencvLibPath"
        }
        Write-Host "✓ OpenCV verified: $($opencvWorldLib.Name)" -ForegroundColor Green
        
        Write-Host "Verifying Boost installation..." -ForegroundColor Green
        $boostIncludePath = "$env:BOOST_ROOT"
        $boostLibPath = "$env:BOOST_ROOT/stage/lib"
        
        if (-Not (Test-Path $boostIncludePath)) {
            throw "Boost root directory not found: $boostIncludePath"
        }
        if (-Not (Test-Path $boostLibPath)) {
            throw "Boost lib directory not found: $boostLibPath"
        }
        
        $boostLibs = Get-ChildItem "$boostLibPath/*.lib" | Measure-Object
        if ($boostLibs.Count -eq 0) {
            throw "No Boost libraries found in $boostLibPath"
        }
        Write-Host "✓ Boost verified: $($boostLibs.Count) libraries found" -ForegroundColor Green

    - name: Set Environment Variables
      shell: powershell
      run: |
        # Set environment variables for CMake
        Write-Host "Setting environment variables..." -ForegroundColor Green
        
        "OPENCV_DIR=$env:OPENCV_DIR" >> $env:GITHUB_ENV
        "BOOST_ROOT=$env:BOOST_ROOT" >> $env:GITHUB_ENV
        
        # Add to PATH for runtime
        $opencvBinPath = "$env:OPENCV_DIR/x64/vc16/bin"
        $boostBinPath = "$env:BOOST_ROOT/stage/lib"
        $currentPath = $env:PATH
        $newPath = "$opencvBinPath;$boostBinPath;$currentPath"
        "PATH=$newPath" >> $env:GITHUB_ENV
        
        Write-Host "Environment variables set:" -ForegroundColor Green
        Write-Host "  OPENCV_DIR=$env:OPENCV_DIR"
        Write-Host "  BOOST_ROOT=$env:BOOST_ROOT"

    - name: Configure CMake
      working-directory: Software/LMSourceCode/ImageProcessing
      shell: powershell
      run: |
        Write-Host "Configuring CMake for ${{ matrix.configuration }}..." -ForegroundColor Green
        
        $cmakeArgs = @(
            "-B", "build"
            "-G", "Ninja"
            "-DCMAKE_BUILD_TYPE=${{ matrix.configuration }}"
            "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
            "-DOpenCV_DIR=$env:OPENCV_DIR"
            "-DBOOST_ROOT=$env:BOOST_ROOT"
            "-DCMAKE_FIND_DEBUG_MODE=OFF"
        )
        
        cmake @cmakeArgs .
        if ($LASTEXITCODE -ne 0) { 
            throw "CMake configuration failed with exit code $LASTEXITCODE" 
        }
        
        Write-Host "✓ CMake configuration completed successfully" -ForegroundColor Green

    - name: Build Project
      working-directory: Software/LMSourceCode/ImageProcessing
      shell: powershell
      run: |
        Write-Host "Building project (${{ matrix.configuration }})..." -ForegroundColor Green
        
        cmake --build build --config ${{ matrix.configuration }} --parallel $env:CMAKE_BUILD_PARALLEL_LEVEL --verbose
        if ($LASTEXITCODE -ne 0) { 
            throw "Build failed with exit code $LASTEXITCODE" 
        }
        
        Write-Host "✓ Build completed successfully" -ForegroundColor Green

    - name: Verify Build Artifacts
      working-directory: Software/LMSourceCode/ImageProcessing
      shell: powershell
      run: |
        Write-Host "Verifying build artifacts..." -ForegroundColor Green
        
        $buildDir = "build"
        $executableName = "pitrac_lm.exe"
        
        # Look for the executable in common locations
        $possiblePaths = @(
            "$buildDir/$executableName",
            "$buildDir/${{ matrix.configuration }}/$executableName",
            "$buildDir/Release/$executableName",
            "$buildDir/Debug/$executableName"
        )
        
        $executablePath = $null
        foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
                $executablePath = $path
                break
            }
        }
        
        if (-Not $executablePath) {
            Write-Host "Build directory contents:" -ForegroundColor Yellow
            Get-ChildItem $buildDir -Recurse | Where-Object { $_.Name -like "*.exe" } | ForEach-Object {
                Write-Host "  Found executable: $($_.FullName)"
            }
            throw "Could not find pitrac_lm.exe in expected locations"
        }
        
        Write-Host "✓ Found executable: $executablePath" -ForegroundColor Green
        
        # Check file size and dependencies
        $fileInfo = Get-Item $executablePath
        Write-Host "  Size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
        Write-Host "  Modified: $($fileInfo.LastWriteTime)"

    - name: Run Smoke Tests
      working-directory: Software/LMSourceCode/ImageProcessing
      shell: powershell
      run: |
        Write-Host "Running smoke tests..." -ForegroundColor Green
        
        $buildDir = "build"
        $executableName = "pitrac_lm.exe"
        
        # Find the executable
        $possiblePaths = @(
            "$buildDir/$executableName",
            "$buildDir/${{ matrix.configuration }}/$executableName",
            "$buildDir/Release/$executableName",
            "$buildDir/Debug/$executableName"
        )
        
        $executablePath = $null
        foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
                $executablePath = $path
                break
            }
        }
        
        if (-Not $executablePath) {
            throw "Could not find executable for testing"
        }
        
        Write-Host "Testing executable: $executablePath" -ForegroundColor Green
        
        try {
            # Test 1: Help command (should not crash)
            Write-Host "  Test 1: Help command..." -ForegroundColor Cyan
            $helpOutput = & $executablePath --help 2>&1
            $helpExitCode = $LASTEXITCODE
            
            if ($helpExitCode -eq 0 -or $helpExitCode -eq 1) {
                Write-Host "  ✓ Help command successful (exit code: $helpExitCode)" -ForegroundColor Green
            } else {
                Write-Warning "  ⚠ Help command returned exit code: $helpExitCode"
                Write-Host "  Output: $helpOutput"
            }
            
            # Test 2: Version info (if available)
            Write-Host "  Test 2: Version check..." -ForegroundColor Cyan
            try {
                $versionOutput = & $executablePath --version 2>&1
                $versionExitCode = $LASTEXITCODE
                if ($versionExitCode -eq 0) {
                    Write-Host "  ✓ Version command successful" -ForegroundColor Green
                    Write-Host "  Version output: $versionOutput"
                } else {
                    Write-Host "  ⚠ Version command not available or failed" -ForegroundColor Yellow
                }
            } catch {
                Write-Host "  ⚠ Version command not available" -ForegroundColor Yellow
            }
            
            # Test 3: Basic execution with CI flags (headless mode)
            Write-Host "  Test 3: Basic execution test..." -ForegroundColor Cyan
            try {
                # Use CI-friendly parameters (no GUI, quick exit)
                $timeout = 10 # seconds
                $ciArgs = @("--show_images=0", "--wait_keys=0", "--headless=1")
                
                Write-Host "  Running: $executablePath $($ciArgs -join ' ')" -ForegroundColor Gray
                
                # Start process with timeout
                $process = Start-Process -FilePath $executablePath -ArgumentList $ciArgs -PassThru -NoNewWindow -RedirectStandardOutput "test_output.txt" -RedirectStandardError "test_error.txt"
                
                if ($process.WaitForExit($timeout * 1000)) {
                    $exitCode = $process.ExitCode
                    Write-Host "  ✓ Process completed with exit code: $exitCode" -ForegroundColor Green
                } else {
                    Write-Host "  ⚠ Process timed out after $timeout seconds, terminating..." -ForegroundColor Yellow
                    $process.Kill()
                    $process.WaitForExit()
                }
                
                # Show output if available
                if (Test-Path "test_output.txt") {
                    $output = Get-Content "test_output.txt" -Raw
                    if ($output) {
                        Write-Host "  Standard Output:" -ForegroundColor Gray
                        Write-Host "    $output" -ForegroundColor Gray
                    }
                }
                
                if (Test-Path "test_error.txt") {
                    $errorOutput = Get-Content "test_error.txt" -Raw
                    if ($errorOutput) {
                        Write-Host "  Standard Error:" -ForegroundColor Gray
                        Write-Host "    $errorOutput" -ForegroundColor Gray
                    }
                }
                
            } catch {
                Write-Warning "  ⚠ Basic execution test failed: $_"
            } finally {
                # Cleanup
                Remove-Item "test_output.txt" -Force -ErrorAction SilentlyContinue
                Remove-Item "test_error.txt" -Force -ErrorAction SilentlyContinue
            }
            
            Write-Host "✓ Smoke tests completed" -ForegroundColor Green
            
        } catch {
            Write-Error "Smoke tests failed: $_"
            throw
        }

    - name: Upload Build Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pitrac-windows-${{ matrix.configuration }}-cmake
        path: |
          Software/LMSourceCode/ImageProcessing/build/*.exe
          Software/LMSourceCode/ImageProcessing/build/**/*.exe
          Software/LMSourceCode/ImageProcessing/build/**/*.pdb
        retention-days: 7

    - name: Upload Build Logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.configuration }}-cmake
        path: |
          Software/LMSourceCode/ImageProcessing/build/CMakeFiles/*.log
          Software/LMSourceCode/ImageProcessing/build/CMakeCache.txt
          Software/LMSourceCode/ImageProcessing/build/compile_commands.json
        retention-days: 3
